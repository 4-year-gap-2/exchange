server:
  port: 19093

spring:
  application:
    name: matching-service

  datasource:
    url: ${DB_HOST}
    driver-class-name: com.mysql.cj.jdbc.Driver
    username: ${DB_NAME}
    password: ${DB_PASSWORD}

  jpa:
    properties:
      hibernate:
        show-sql: true
        format-sql: true
#    hibernate:
#      ddl-auto: create

  kafka:
    host: ${KAFKA_HOST}
    username: ${KAFKA_NAME}
    password: ${KAFKA_PASSWORD}
    consumer:
      auto-offset-reset: earliest

#  data:
#    redis:
#      host: ${REDIS_HOST}
##      host: localhost
#      port: 7001
#      username: ${REDIS_NAME}
#      password: ${REDIS_PASSWORD}

  data:
    redis:
      cluster:
        nodes: ${REDIS_HOST}:7001
        max-redirects: 3
      username: ${REDIS_NAME}
      password: ${REDIS_PASSWORD}

eureka:
  client:
    service-url:
      defaultZone: http://${EUREKA_NAME}:${EUREKA_PASSWORD}@${EUREKA_HOST}:19090/eureka/
#  instance:
#    hostname: ${My_host}
#    securePortEnabled: true
#    nonSecurePortEnabled: false
#    securePort: 443
#    statusPageUrl: https://${eureka.instance.hostname}/actuator/info
#    healthCheckUrl: https://${eureka.instance.hostname}/actuator/health
#    homePageUrl: https://${eureka.instance.hostname}/
#    preferIpAddress: false
#    secureVirtualHostName: ${spring.application.name}

management:
  endpoints:
    web:
      exposure:
        include: "*" # 모든 Actuator 엔드포인트를 노출

  endpoint:
    health:
      show-details: always # 헬스 체크 엔드포인트에서 상세 정보 표시

#  zipkin:
#    tracing:
#      endpoint: "http://localhost:9411/api/v2/spans"
#  tracing:
#    sampling:
#      probability: 1.0

redis:
  stream:
    worker:
      thread-count: 4  # 처리할 스레드 수
    message:
      batch-size: 10   # 한 번에 가져올 메시지 수